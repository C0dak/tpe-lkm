
* How exactly does this module work?

I basically use a method that kernel rootkits use to insert itself into the
kernel by writing code directly to live memory, also known as "hot-patching".
The difference is, I'm not trying to hide anything, I'm trying to further
secure the system. Due to this "hot-patching" of the kernel, it is very
important that you use a kernel in the above "Supported Kernels" list.

This method is also similar to how Ksplice works, though is not quite as
advanced.  Ksplice is a tool used to apply security fixes to your kernel
without having to reboot your system.

* What are other security things I should do?

You're no doubt using this module to enhance the security of your system. I
highly recommend that you enable all of the sysctl options under "extras"
(see the "Configuration" section in the README). Also, you should have this
kernel module loaded at some point during the boot process, and at the end of
your boot, do this (in your rc.local or other relivant file):

echo 1 > /proc/sys/kernel/modules_disabled

If this file doesn't exist, you have an old kernel. In that case, lucky for
you, you can do this:

echo 1 > /proc/sys/tpe/extras/modules_disabled

If modules aren't loaded at boot time, they really shouldn't be allowed to load
at all, because modules can use code (like in this one) to insert malicious
code into your system. While still possible to insert code via /dev/kmem and
/dev/mem, if you're using a recent kernel, it is more difficult to do. It also
helps if your system is compiled without /proc/kallsyms and your kernel's
System.map file isn't known to the hacker (ie; not put in your /boot/
directory).

* Why did I get a compilation failure when building this module?

Due to the continueing nature of changing interfaces between kernel versions,
this code my not compile correctly, or even crash your system, if done on a
linux system not stated as supported. Use this module on non-tested kernels at
your own risk.

In general, though, the only issue I've seen so far when porting this module to
different kernel versions is data structure changes, which is solved by an easy
"#if LINUX_VERSION_CODE" statement. But future kernels may have big enough
changes to the point where the hijacking method I'm using no longer works, so
keep that in mind.

* Why isn't this using the Linux Security Module (LSM) Framework?

There are two main reasons:

1) Because LSM no longer exports its symbols

This means that people have to recompile their kernel if they want additional
security modules not supported by their distribution. This change happened at
around versoin 2.6.24

This module actually does use LSM hooks, it just has to use a rootkit-like
method to hook into (hijack) them. So, although this change was done with good
intent, look how useless it was; I'm able to hook into the kernel anyway :P 

2) Because recent kernels were changed to only support a single LSM at a time

Back in the 2.6.18 days (RHEL5) you could "chain" LSMs, meaning have more than
one loaded at a time. This is no longer the case as of this writing, and no
distribution is going to replace their preferred LSM with TPE. It's just not
going to happen, so why bother use the framework?

* Will TPE be put into the mainline kernel?

It wouldn't be very hard to port this module into the mainline kernel. However,
as far as I can tell, any security feature going into the mainline kernel is
being told to use the LSM framework. So I'm not going to bother to submit it
upstream at this point. If you disagree, and want to try to get TPE into the
mainline kernel anyway, go for it.

* Why the "Use at your own risk!" warning?

Although stable on tested systems, this code is "dangerous". It hijacks the
some system calls, inserting code to do the TPE checks on anything that is
executed, and it's possible that this module could destabilize your kernel.
When used on the below list of supported sysyems, it hasn't that been
problematic for me, but I've never used your system before, so use this module
at your own risk.

Basically, if your system didn't crash immediately after you insmod this
module, you are going to be fine.

* This module is a rootkit. Rootkits are bad.

That's not really a question, but I'll answer it anyway. Yes, due to the way
this module has to be written to work, it is technically a rootkit. No,
rootkits aren't bad. That's like calling nmap bad. It's not the tool that's
bad, it's how it's used.

* But you've made writing a rootkit a lot easier for others.

Not having this code isn't stopping anyone from writing a rootkit. There are
plenty of other resources on the Internet that host the source code of all
kinds of rootkits. The method I'm using here is just one of those methods;
quite arguably the easiest to write, and easiest to defeat. Just "echo 1 >
/proc/sys/kernel/modules_disabled" and this can't go in.

* But rootkit detail this, rootkit detail that.

Enough already :)

